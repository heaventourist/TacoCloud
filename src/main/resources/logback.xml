<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">
  <!-- 定义参数常量，便于后面直接用${name}来获取value值 -->
  <property name="log.pattern"
    value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] [%-5level] %logger{50} - %msg%n"/>
  <!--<property name="log.filePath" value="${catalina.base}/logs/webapps"/>-->
  <property name="log.filePath" value="logs"/>
  <property name="log.maxHistory" value="15"/>

  <!-- ch.qos.logback.core.ConsoleAppender 控制台输出 -->
  <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
    <!-- 过去使用layout，现在都推荐使用encoder
         作用一：将日志信息转换（格式化）为字符串
         作用二：然后写入到文件中-->
    <encoder>
      <pattern>${log.pattern}</pattern>
    </encoder>
  </appender>

  <!-- ch.qos.logback.core.rolling.RollingFileAppender 文件日志输出到文件 -->
  <!-- 1.打印debug级别日志的设置 -->
  <appender name="debugAppender"
    class="ch.qos.logback.core.rolling.RollingFileAppender">
    <!-- 当天生成的日志文件的路径 -->
    <file>${log.filePath}/debug.log</file>
    <!-- 设置基于时间(每天)的滚动策略，也就是将日志内容按照日期来写入到相应的文件中-->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!-- 当天之前的每天生成的日志文件的路径 -->
      <fileNamePattern>${log.filePath}/debug/debug-%d{yyyy-MM-dd}.log.gz
      </fileNamePattern>
      <!-- 最大历史保存文件的数量，只保存最近30天的日志文件，超出的会被删除-->
      <maxHistory>${log.maxHistory}</maxHistory>
    </rollingPolicy>
    <encoder>
      <pattern>${log.pattern}</pattern>
    </encoder>
    <!-- 过滤掉非debug级别的信息 -->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>debug</level>
      <onMatch>ACCEPT</onMatch>
      <!-- 作用是拒绝写入所有与<level>不匹配的日志信息，
      也就是非debug级别的日志信息都不会被写入到日志文件中 -->
      <onMismatch>DENY</onMismatch>
    </filter>
  </appender>

  <!-- 2.打印info级别日志的设置 -->
  <appender name="infoAppender"
    class="ch.qos.logback.core.rolling.RollingFileAppender">

    <!-- 当天生成的日志文件的路径 -->
    <file>${log.filePath}/info.log</file>
    <!-- 设置基于时间(每天)的滚动策略，也就是将日志内容按照日期来写入到相应的文件中-->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!-- 当天之前的每天生成的日志文件的路径 -->
      <fileNamePattern>${log.filePath}/info/info-%d{yyyy-MM-dd}.log.gz
      </fileNamePattern>
      <!-- 最大历史保存文件的数量，只保存最近30天的日志文件，超出的会被删除-->
      <maxHistory>${log.maxHistory}</maxHistory>
    </rollingPolicy>
    <encoder>
      <pattern>${log.pattern}</pattern>
    </encoder>
    <!-- 过滤掉非info级别的信息 -->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>info</level>
      <onMatch>ACCEPT</onMatch>
      <!-- 作用是拒绝写入所有与<level>不匹配的日志信息，
      也就是非info级别的日志信息都不会被写入到日志文件中 -->
      <onMismatch>DENY</onMismatch>
    </filter>
  </appender>

  <!-- 3.打印error级别日志的设置 -->
  <appender name="errorAppender"
    class="ch.qos.logback.core.rolling.RollingFileAppender">

    <!-- 当天生成的日志文件的路径 -->
    <file>${log.filePath}/error.log</file>
    <!-- 设置基于时间(每天)的滚动策略，也就是将日志内容按照日期来写入到相应的文件中-->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!-- 当天之前的每天生成的日志文件的路径 -->
      <fileNamePattern>${log.filePath}/error/error-%d{yyyy-MM-dd}.log.gz
      </fileNamePattern>
      <!-- 最大历史保存文件的数量，只保存最近30天的日志文件，超出的会被删除-->
      <maxHistory>${log.maxHistory}</maxHistory>
    </rollingPolicy>
    <encoder>
      <pattern>${log.pattern}</pattern>
    </encoder>
    <!-- 过滤掉非error级别的信息 -->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>error</level>
      <onMatch>ACCEPT</onMatch>
      <!-- 作用是拒绝写入所有与<level>不匹配的日志信息，
      也就是非error级别的日志信息都不会被写入到日志文件中 -->
      <onMismatch>DENY</onMismatch>
    </filter>
  </appender>


  <logger name="com.example.taco_cloud" level="debug" additivity="true">
    <appender-ref ref="infoAppender"/>
    <appender-ref ref="debugAppender"/>
    <appender-ref ref="errorAppender"/>
  </logger>

  <root level="info">
    <!-- 表示按照console的设置去输出日志到控制台 -->
    <appender-ref ref="console"/>
  </root>
</configuration>